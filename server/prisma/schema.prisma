generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  username String @unique
  email    String @unique
  password String

  imageUrl String?
  imageId  String?

  createdAt DateTime @default(now())

  role          Role               @default(User)
  recipes       Recipe[]
  subscriptions Subscription[]
  notes         Note[]
  collections   RecipeCollection[]
  Favorite      Favorite[]
  following     UserSubscription[] @relation("UserFollowing")
  followers     UserSubscription[] @relation("UserFollowers")
}

enum Role {
  Admin
  User
}

model UserSubscription {
  id          String   @id @default(uuid())
  followerId  String // ID пользователя, который подписывается
  followingId String // ID пользователя, на которого подписываются
  createdAt   DateTime @default(now())

  follower  User @relation("UserFollowers", fields: [followerId], references: [id])
  following User @relation("UserFollowing", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Recipe {
  id          String               @id @default(uuid())
  title       String
  description String?
  imageUrl    String?
  imageId     String?
  steps       CookingStep[]
  userId      String
  ingredients IngredientOnRecipe[]
  portions    Int
  cuisine     Cuisine?             @relation(fields: [cuisineId], references: [id], onDelete: Cascade)
  cuisineId   String?
  categories  CategoryOnRecipe[]

  createdAt DateTime @default(now())

  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  notes              Note[]
  RecipeOnCollection RecipeOnCollection[]
  Favorite           Favorite[]

  @@unique([userId, title])
}

model CookingStep {
  id          String  @id @default(uuid())
  recipeId    String
  title       String
  description String?
  imageUrl    String?
  imageId     String?
  order       Int
  durationMin Int

  recipe         Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  cookingPhaseId String?
}

model Ingredient {
  id   String @id @default(uuid())
  name String @unique

  ingredientCategoryId String
  allergens            IngredientAllergen[]
  category             IngredientCategory   @relation(fields: [ingredientCategoryId], references: [id], onDelete: Cascade)
  recipes              IngredientOnRecipe[]
}

model IngredientCategory {
  id         String       @id @default(uuid())
  name       String       @unique
  Ingredient Ingredient[]
}

model IngredientOnRecipe {
  id               String  @id @default(uuid())
  recipeId         String?
  ingredientId     String
  quantity         Float   @default(1.0)
  ingredientUnitId String

  unit       IngredientUnit @relation(fields: [ingredientUnitId], references: [id], onDelete: Cascade)
  recipe     Recipe?        @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  ingredient Ingredient     @relation(fields: [ingredientId], references: [id], onDelete: Cascade)

  @@unique([recipeId, ingredientId])
}

model IngredientUnit {
  id         String   @id @default(uuid())
  name       String   @unique
  shortName  String   @unique
  unitType   UnitType
  baseUnitId String?
  multiplier Float?   @default(1.0)

  baseUnit     IngredientUnit?      @relation("BaseUnits", fields: [baseUnitId], references: [id], onDelete: Cascade)
  derivedUnits IngredientUnit[]     @relation("BaseUnits")
  ingredients  IngredientOnRecipe[]

  @@index([unitType])
  @@index([baseUnitId])
}

enum UnitType {
  WEIGHT // Весовые единицы (граммы, килограммы)
  VOLUME // Объемные единицы (миллилитры, литры)
  PIECE // Штучные единицы (шт, пучок)
  CUSTOM // Прочие (по вкусу, щепотка)
}

model Cuisine {
  id   String @id @default(uuid())
  name String @unique

  description String?

  recipes Recipe[]
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  description String?

  recipes      CategoryOnRecipe[]
  Subscription Subscription[]
}

model CategoryOnRecipe {
  id         String @id @default(uuid())
  recipeId   String
  categoryId String

  recipe   Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([recipeId, categoryId])
}

model Subscription {
  id         String   @id @default(uuid())
  userId     String
  categoryId String
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([userId, categoryId])
}

model Allergen {
  id          String               @id @default(uuid())
  name        String               @unique
  severity    Severity             @default(Trace)
  ingredients IngredientAllergen[]
}

model IngredientAllergen {
  id             String     @id @default(uuid())
  ingredient     Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  allergen       Allergen   @relation(fields: [allergenId], references: [id], onDelete: Cascade)
  ingredientId   String
  allergenId     String
  customSeverity Severity? // Переопределение серьёзности для конкретного ингредиента

  @@unique([ingredientId, allergenId])
}

enum Severity {
  Trace // Следы (например, "может содержать следы орехов")
  Low // Незначительное количество
  Moderate // Умеренное (например, соус с молоком)
  High // Высокое (например, цельные орехи)
}

model Note {
  id        String   @id @default(uuid())
  text      String
  isPublic  Boolean
  userId    String
  recipeId  String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

model RecipeCollection {
  id        String   @id @default(uuid())
  name      String
  isPublic  Boolean
  createdAt DateTime @default(now())

  RecipeOnCollection RecipeOnCollection[]
  User               User?                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String?
}

model RecipeOnCollection {
  id                 String @id @default(uuid())
  recipeId           String
  recipeCollectionId String

  recipe     Recipe           @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  collection RecipeCollection @relation(fields: [recipeCollectionId], references: [id], onDelete: Cascade)

  @@unique([recipeId, recipeCollectionId])
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String
  recipeId  String
  createdAt DateTime @default(now())
  notes     String?
  status    String? // "favorite" | "want_to_try"

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
  @@index([userId])
  @@index([recipeId])
}

/**
 * мвс, жизненный цикл мвс (фильтры, ) частичные представления, хэлперы, кастомные хэлперы,виды,
 * маршрутизация,способы задания маршрутов, (мап контроллер роут) , взаимоствязь между контроллерами моделями,
 * нескольк способов связи с моделью (все возможные), способы передачи параметров, как понимает какое представление ввызвать
 */
