generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  username      String         @unique
  email         String         @unique
  password      String
  role          Role           @default(User)
  recipes       Recipe[]
  subscriptions Subscription[]
  notes         Note[]
}

enum Role {
  Admin
  User
}

model Recipe {
  id          String               @id @default(uuid())
  title       String
  description String?
  steps       CookingStep[]
  userId      String
  ingredients IngredientOnRecipe[]
  portions    Int
  cuisine     Cuisine?             @relation(fields: [cuisineId], references: [id])
  cuisineId   String?
  categories  CategoryOnRecipe[]

  user  User   @relation(fields: [userId], references: [id])
  notes Note[]

  @@unique([userId, title])
}

model CookingStep {
  id          String  @id @default(uuid())
  recipeId    String
  title       String
  description String?
  image       String?
  order       Int
  durationMin Int

  recipe         Recipe  @relation(fields: [recipeId], references: [id])
  cookingPhaseId String?
}

model Ingredient {
  id   String @id @default(uuid())
  name String @unique

  ingredientCategoryId String
  allergens            IngredientAllergen[]
  category             IngredientCategory   @relation(fields: [ingredientCategoryId], references: [id])
  recipes              IngredientOnRecipe[]
}

model IngredientCategory {
  id         String       @id @default(uuid())
  name       String       @unique
  Ingredient Ingredient[]
}

// model IngredientOnRecipe {
//   id               String  @id @default(uuid())
//   recipeId         String?
//   ingredientId     String
//   quantity         Float
//   ingredientUnitId String

//   unit       IngredientUnit @relation(fields: [ingredientUnitId], references: [id])
//   recipe     Recipe?        @relation(fields: [recipeId], references: [id])
//   ingredient Ingredient     @relation(fields: [ingredientId], references: [id])

//   @@unique([recipeId, ingredientId])
// }

model IngredientOnRecipe {
  id               String  @id @default(uuid())
  recipeId         String?
  ingredientId     String
  quantity         Float   @default(1.0)
  ingredientUnitId String

  // Удалено baseQuantity (лучше вычислять на лету)
  unit       IngredientUnit @relation(fields: [ingredientUnitId], references: [id])
  recipe     Recipe?        @relation(fields: [recipeId], references: [id])
  ingredient Ingredient     @relation(fields: [ingredientId], references: [id])

  @@unique([recipeId, ingredientId])
}

// model IngredientUnit {
//   id          String @id @default(uuid())
//   name        String @unique
//   gramsAmount Float

//   IngredientOnRecipe IngredientOnRecipe[]
// }

model IngredientUnit {
  id         String   @id @default(uuid())
  name       String   @unique
  shortName  String   @unique
  unitType   UnitType
  baseUnitId String?
  multiplier Float?   @default(1.0)

  // Отношения
  baseUnit     IngredientUnit?      @relation("BaseUnits", fields: [baseUnitId], references: [id])
  derivedUnits IngredientUnit[]     @relation("BaseUnits")
  ingredients  IngredientOnRecipe[]

  // Удалено UnitConversion[]
  @@index([unitType])
  @@index([baseUnitId])
}

enum UnitType {
  WEIGHT // Весовые единицы (граммы, килограммы)
  VOLUME // Объемные единицы (миллилитры, литры)
  PIECE // Штучные единицы (шт, пучок)
  CUSTOM // Прочие (по вкусу, щепотка)
}

model Cuisine {
  id   String @id @default(uuid())
  name String @unique

  recipes Recipe[]
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  recipes      CategoryOnRecipe[]
  Subscription Subscription[]
}

model CategoryOnRecipe {
  id         String @id @default(uuid())
  recipeId   String
  categoryId String

  recipe   Recipe   @relation(fields: [recipeId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@unique([recipeId, categoryId])
}

model Subscription {
  id         String @id @default(uuid())
  userId     String
  categoryId String

  user     User     @relation(fields: [userId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])
}

model Allergen {
  id          String               @id @default(uuid())
  name        String               @unique
  severity    Severity             @default(Trace)
  ingredients IngredientAllergen[]
}

model IngredientAllergen {
  id             String     @id @default(uuid())
  ingredient     Ingredient @relation(fields: [ingredientId], references: [id])
  allergen       Allergen   @relation(fields: [allergenId], references: [id])
  ingredientId   String
  allergenId     String
  customSeverity Severity? // Переопределение серьёзности для конкретного ингредиента

  @@unique([ingredientId, allergenId])
}

enum Severity {
  Trace // Следы (например, "может содержать следы орехов")
  Low // Незначительное количество
  Moderate // Умеренное (например, соус с молоком)
  High // Высокое (например, цельные орехи)
}

model Note {
  id       String  @id @default(uuid())
  text     String
  isPublic Boolean
  userId   String
  recipeId String

  user   User   @relation(fields: [userId], references: [id])
  recipe Recipe @relation(fields: [recipeId], references: [id])
}
